{"version":3,"sources":["../../src/controllers/modelGroup.controller.ts"],"sourcesContent":["import { NextFunction, Response, Request } from \"express\";\r\nimport { CreateModelGroup } from \"@/dtos/modelgroup.dto\";\r\nimport { ModelGroup } from \"@/interfaces/modelgroup.interface\";\r\nimport { logger } from \"@/utils/logger\";\r\nimport { ModelGroupServices } from \"@/services/modelgroup.services\";\r\nimport { AWSDBClient, AWSTables } from '@/aws';\r\nimport { ScanCommand, PutItemCommand } from '@aws-sdk/client-dynamodb';\r\nimport { unmarshall } from '@aws-sdk/util-dynamodb';\r\nimport { ModelGroupModel } from \"@/models/modelgroup.model\";\r\n\r\nclass ModelGroupController {\r\n  public ModelGroupService = new ModelGroupServices();\r\n\r\n  public getall = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const findAllData = await this.ModelGroupService.findAllModelGroup();\r\n      res.status(200).json(findAllData[\"content\"]);\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n\r\n      const objectId = req.params.id;\r\n      const findBlocks = await this.ModelGroupService.findModelGroupByAsGrp(objectId);\r\n\r\n      res.status(200).json(findBlocks);\r\n\r\n    } catch (err) {\r\n      next(err);\r\n      logger.error(err);\r\n    };\r\n  }\r\n\r\n  public create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userData: ModelGroup = req.body;\r\n      const createUserData = await this.ModelGroupService.createModelGroup(userData);\r\n\r\n      res.status(201).json({ data: createUserData, message: 'created' });\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public update = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n\r\n      const blocks: ModelGroup = req.body;\r\n      const updateBlocks = await this.ModelGroupService.update(blocks);\r\n\r\n      res.status(201).json({ data: updateBlocks, message: 'block updated' });\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public delete = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const blockId: string = req.params.id;\r\n      const deleteBlocks = await this.ModelGroupService.delete(blockId);\r\n\r\n      res.status(200).json({ data: deleteBlocks, message: \"block deleted\" });\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n\r\n  };\r\n\r\n  public assign = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    var model = new ModelGroupModel();\r\n\r\n    let queryParams = {\r\n      TableName: AWSTables.groupmodelnumber,\r\n      FilterExpression: \"mn_status = :mn_status\",\r\n      ExpressionAttributeValues: {\r\n        \":mn_status\": { S: \"5\" }\r\n      }\r\n    };\r\n\r\n    const data = await AWSDBClient.send(new ScanCommand(queryParams));\r\n\r\n    const unassignedModels = [];\r\n    data.Items.forEach(element => {\r\n      unassignedModels.push(unmarshall(element));\r\n    });\r\n\r\n    const dataRes = unassignedModels.sort((a, b) => a.mn_group - b.mn_group);\r\n    const dte = new Date();\r\n\r\n    if (dataRes.length < req.body.assignCount) {\r\n      res.statusCode = 500;\r\n      res.json({\r\n        error:\r\n          \"There is no sufficient group for assignment. Please contact administrator.\",\r\n      });\r\n    } else {\r\n      let respItems = [];\r\n      let respitem = {};\r\n\r\n      for (let i = 0; i < req.body.assignCount; i++) {\r\n        let modelitem: ModelGroup = dataRes[i];\r\n        modelitem.mn_status = \"1\";\r\n        modelitem.mn_source_system = req.body.sourceSystem;\r\n        modelitem.mn_distribution_comment = req.body.assignComment;\r\n        modelitem.mn_initial_assignment_date = dte.toString();\r\n\r\n        const updateRes = await model.updateModelGroup(modelitem);\r\n\r\n        if (updateRes.data.httpStatusCode == 200) {\r\n          respItems.push(modelitem);\r\n        }\r\n\r\n      }\r\n\r\n      res.json({\r\n        success: \"put call succeed!\",\r\n        url: req.url,\r\n        data: respItems,\r\n      });\r\n    }\r\n  }\r\n  //  });\r\n\r\n  public republish = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n\r\n    var model = new ModelGroupModel();\r\n    let respItems = [];\r\n\r\n    for (let i = 0; i < req.body.filteredGroup.length; i++) {\r\n      const modelitem: ModelGroup = {\r\n        mn_group: req.body.filteredGroup[i].mn_group,\r\n        mn_status: req.body.status,\r\n        mn_source_system: req.body.sourceSystem,\r\n        mn_distribution_comment: req.body.assignComment,\r\n        mn_initial_assignment_date:\r\n          req.body.filteredGroup[i].mn_initial_assignment_date,\r\n        mn_distribution_date: req.body.filteredGroup[i].mn_distribution_date,\r\n      };\r\n\r\n      const data = await model.updateModelGroup(modelitem);\r\n      if (data.data.httpStatusCode == 200) {\r\n        respItems.push(modelitem);\r\n      }\r\n\r\n    }\r\n    res.json({\r\n      success: \"update call succeed!\",\r\n      url: req.url,\r\n      data: respItems,\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default ModelGroupController;"],"names":["ModelGroupController","ModelGroupService","ModelGroupServices","getall","req","res","next","findAllData","findAllModelGroup","status","json","error","getById","objectId","params","id","findBlocks","findModelGroupByAsGrp","err","logger","create","userData","body","createUserData","createModelGroup","data","message","update","blocks","updateBlocks","delete","blockId","deleteBlocks","assign","model","ModelGroupModel","queryParams","TableName","AWSTables","groupmodelnumber","FilterExpression","ExpressionAttributeValues","S","AWSDBClient","send","ScanCommand","unassignedModels","Items","forEach","element","push","unmarshall","dataRes","sort","a","b","mn_group","dte","Date","length","assignCount","statusCode","respItems","respitem","i","modelitem","mn_status","mn_source_system","sourceSystem","mn_distribution_comment","assignComment","mn_initial_assignment_date","toString","updateRes","updateModelGroup","httpStatusCode","success","url","republish","filteredGroup","mn_distribution_date"],"mappings":";;;;+BAiKA;;aAAA;;wBA9JuB;oCACY;qBACI;gCACK;8BACjB;iCACK;AAEhC,IAAA,AAAMA,uBAAN,MAAMA;;aACGC,oBAAoB,IAAIC,sCAAkB;aAE1CC,SAAS,OAAOC,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMC,cAAc,MAAM,IAAI,CAACN,iBAAiB,CAACO,iBAAiB;gBAClEH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACH,WAAW,CAAC,UAAU;YAE7C,EAAE,OAAOI,OAAO;gBACdL,KAAKK;YACP;QACF;aAEOC,UAAU,OAAOR,KAAcC,KAAeC,OAAsC;YACzF,IAAI;gBAEF,MAAMO,WAAWT,IAAIU,MAAM,CAACC,EAAE;gBAC9B,MAAMC,aAAa,MAAM,IAAI,CAACf,iBAAiB,CAACgB,qBAAqB,CAACJ;gBAEtER,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACM;YAEvB,EAAE,OAAOE,KAAK;gBACZZ,KAAKY;gBACLC,cAAM,CAACR,KAAK,CAACO;YACf;QACF;aAEOE,SAAS,OAAOhB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMe,WAAuBjB,IAAIkB,IAAI;gBACrC,MAAMC,iBAAiB,MAAM,IAAI,CAACtB,iBAAiB,CAACuB,gBAAgB,CAACH;gBAErEhB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEe,MAAMF;oBAAgBG,SAAS;gBAAU;YAElE,EAAE,OAAOf,OAAO;gBACdL,KAAKK;YACP;QACF;aAEOgB,SAAS,OAAOvB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBAEF,MAAMsB,SAAqBxB,IAAIkB,IAAI;gBACnC,MAAMO,eAAe,MAAM,IAAI,CAAC5B,iBAAiB,CAAC0B,MAAM,CAACC;gBAEzDvB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEe,MAAMI;oBAAcH,SAAS;gBAAgB;YAEtE,EAAE,OAAOf,OAAO;gBACdL,KAAKK;YACP;QACF;aAEOmB,SAAS,OAAO1B,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMyB,UAAkB3B,IAAIU,MAAM,CAACC,EAAE;gBACrC,MAAMiB,eAAe,MAAM,IAAI,CAAC/B,iBAAiB,CAAC6B,MAAM,CAACC;gBAEzD1B,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEe,MAAMO;oBAAcN,SAAS;gBAAgB;YAEtE,EAAE,OAAOf,OAAO;gBACdL,KAAKK;YACP;QAEF;aAEOsB,SAAS,OAAO7B,KAAcC,KAAeC,OAAsC;YACxF,IAAI4B,QAAQ,IAAIC,gCAAe;YAE/B,IAAIC,cAAc;gBAChBC,WAAWC,cAAS,CAACC,gBAAgB;gBACrCC,kBAAkB;gBAClBC,2BAA2B;oBACzB,cAAc;wBAAEC,GAAG;oBAAI;gBACzB;YACF;YAEA,MAAMjB,OAAO,MAAMkB,gBAAW,CAACC,IAAI,CAAC,IAAIC,2BAAW,CAACT;YAEpD,MAAMU,mBAAmB,EAAE;YAC3BrB,KAAKsB,KAAK,CAACC,OAAO,CAACC,CAAAA,UAAW;gBAC5BH,iBAAiBI,IAAI,CAACC,IAAAA,wBAAU,EAACF;YACnC;YAEA,MAAMG,UAAUN,iBAAiBO,IAAI,CAAC,CAACC,GAAGC,IAAMD,EAAEE,QAAQ,GAAGD,EAAEC,QAAQ;YACvE,MAAMC,MAAM,IAAIC;YAEhB,IAAIN,QAAQO,MAAM,GAAGvD,IAAIkB,IAAI,CAACsC,WAAW,EAAE;gBACzCvD,IAAIwD,UAAU,GAAG;gBACjBxD,IAAIK,IAAI,CAAC;oBACPC,OACE;gBACJ;YACF,OAAO;gBACL,IAAImD,YAAY,EAAE;gBAClB,IAAIC,WAAW,CAAC;gBAEhB,IAAK,IAAIC,IAAI,GAAGA,IAAI5D,IAAIkB,IAAI,CAACsC,WAAW,EAAEI,IAAK;oBAC7C,IAAIC,YAAwBb,OAAO,CAACY,EAAE;oBACtCC,UAAUC,SAAS,GAAG;oBACtBD,UAAUE,gBAAgB,GAAG/D,IAAIkB,IAAI,CAAC8C,YAAY;oBAClDH,UAAUI,uBAAuB,GAAGjE,IAAIkB,IAAI,CAACgD,aAAa;oBAC1DL,UAAUM,0BAA0B,GAAGd,IAAIe,QAAQ;oBAEnD,MAAMC,YAAY,MAAMvC,MAAMwC,gBAAgB,CAACT;oBAE/C,IAAIQ,UAAUhD,IAAI,CAACkD,cAAc,IAAI,KAAK;wBACxCb,UAAUZ,IAAI,CAACe;oBACjB,CAAC;gBAEH;gBAEA5D,IAAIK,IAAI,CAAC;oBACPkE,SAAS;oBACTC,KAAKzE,IAAIyE,GAAG;oBACZpD,MAAMqC;gBACR;YACF,CAAC;QACH;aAGOgB,YAAY,OAAO1E,KAAcC,KAAeC,OAAsC;YAE3F,IAAI4B,QAAQ,IAAIC,gCAAe;YAC/B,IAAI2B,YAAY,EAAE;YAElB,IAAK,IAAIE,IAAI,GAAGA,IAAI5D,IAAIkB,IAAI,CAACyD,aAAa,CAACpB,MAAM,EAAEK,IAAK;gBACtD,MAAMC,YAAwB;oBAC5BT,UAAUpD,IAAIkB,IAAI,CAACyD,aAAa,CAACf,EAAE,CAACR,QAAQ;oBAC5CU,WAAW9D,IAAIkB,IAAI,CAACb,MAAM;oBAC1B0D,kBAAkB/D,IAAIkB,IAAI,CAAC8C,YAAY;oBACvCC,yBAAyBjE,IAAIkB,IAAI,CAACgD,aAAa;oBAC/CC,4BACEnE,IAAIkB,IAAI,CAACyD,aAAa,CAACf,EAAE,CAACO,0BAA0B;oBACtDS,sBAAsB5E,IAAIkB,IAAI,CAACyD,aAAa,CAACf,EAAE,CAACgB,oBAAoB;gBACtE;gBAEA,MAAMvD,OAAO,MAAMS,MAAMwC,gBAAgB,CAACT;gBAC1C,IAAIxC,KAAKA,IAAI,CAACkD,cAAc,IAAI,KAAK;oBACnCb,UAAUZ,IAAI,CAACe;gBACjB,CAAC;YAEH;YACA5D,IAAIK,IAAI,CAAC;gBACPkE,SAAS;gBACTC,KAAKzE,IAAIyE,GAAG;gBACZpD,MAAMqC;YACR;QACF;;AAEF;MAEA,WAAe9D"}