{"version":3,"sources":["../../src/controllers/SPMGTINBlcoks.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nimport { CreateSPMGTINBlocks } from '@/dtos/SPMTGTINBlocks.dto';\r\nimport { SPMGTINBlocks } from '@interfaces/SPMGTINBlocks.interface';\r\nimport { SPMGTINBlocksServices } from '@/services/SPMGTINBlocks.services';\r\nimport { logger } from '@utils/logger';\r\nimport { unmarshall } from '@aws-sdk/util-dynamodb';\r\n\r\n\r\nclass SPMGTINBlocksController {\r\n  public SPMTGTINBlocksService = new SPMGTINBlocksServices();\r\n\r\n  public getAll = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const findAllData = await this.SPMTGTINBlocksService.finaAllSPMGTINBlcoks();\r\n\r\n      res.status(200).json(findAllData[\"content\"]);\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n     \r\n      const objectId = req.params.id;\r\n      const findBlocks = await this.SPMTGTINBlocksService.findGTINBlocksById(objectId);\r\n     \r\n      res.status(200).json(findBlocks);\r\n\r\n    } catch (err) {\r\n      next(err);\r\n      logger.error(err);\r\n    };\r\n  }\r\n\r\n  public create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n     const userData : CreateSPMGTINBlocks = ( req.body);\r\n      const createUserData = await this.SPMTGTINBlocksService.create(userData);\r\n\r\n      if(createUserData.success){\r\n        const findAllData = await this.SPMTGTINBlocksService.finaAllSPMGTINBlcoks();\r\n        res.status(201).json({ success: \"post call succeed!\", data: findAllData.data, message: 'block updated'});\r\n        }\r\n        else{\r\n          res.status(500).json({ error: \"Could not load items\" });\r\n        }\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n\r\n  public update = async(req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n\r\n      const blocks: CreateSPMGTINBlocks = req.body;\r\n      const updateBlocks = await this.SPMTGTINBlocksService.update(blocks);\r\n      \r\n      if(updateBlocks.success){\r\n      const findAllData = await this.SPMTGTINBlocksService.finaAllSPMGTINBlcoks();\r\n      res.status(201).json({ success: \"post call succeed!\", data: findAllData.data, message: 'block updated'});\r\n      }\r\n      else{\r\n        res.status(500).json({ error: \"Could not load items\" });\r\n      }\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public delete = async(req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n      try {\r\n          const blockId: string = req.params.id;\r\n          const deleteBlocks = await this.SPMTGTINBlocksService.delete(blockId);\r\n         \r\n          res.status(200).json({ data: deleteBlocks, message:\"block deleted\" });\r\n          \r\n      } catch (error){\r\n        next(error);\r\n      }\r\n\r\n  };\r\n\r\n}\r\n\r\nexport default SPMGTINBlocksController;\r\n"],"names":["SPMGTINBlocksController","SPMTGTINBlocksService","SPMGTINBlocksServices","getAll","req","res","next","findAllData","finaAllSPMGTINBlcoks","status","json","error","getById","objectId","params","id","findBlocks","findGTINBlocksById","err","logger","create","userData","body","createUserData","success","data","message","update","blocks","updateBlocks","delete","blockId","deleteBlocks"],"mappings":";;;;+BAyFA;;aAAA;;uCAtFsC;wBACf;AAIvB,IAAA,AAAMA,0BAAN,MAAMA;;aACGC,wBAAwB,IAAIC,4CAAqB;aAEjDC,SAAS,OAAOC,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACF,MAAMC,cAAc,MAAM,IAAI,CAACN,qBAAqB,CAACO,oBAAoB;gBAEzEH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACH,WAAW,CAAC,UAAU;YAE7C,EAAE,OAAOI,OAAO;gBACdL,KAAKK;YACP;QACF;aAEOC,UAAU,OAAOR,KAAcC,KAAeC,OAAsC;YACzF,IAAI;gBAEF,MAAMO,WAAWT,IAAIU,MAAM,CAACC,EAAE;gBAC9B,MAAMC,aAAa,MAAM,IAAI,CAACf,qBAAqB,CAACgB,kBAAkB,CAACJ;gBAEvER,IAAII,MAAM,CAAC,KAAKC,IAAI,CAACM;YAEvB,EAAE,OAAOE,KAAK;gBACZZ,KAAKY;gBACLC,cAAM,CAACR,KAAK,CAACO;YACf;QACF;aAEOE,SAAS,OAAOhB,KAAcC,KAAeC,OAAsC;YACxF,IAAI;gBACH,MAAMe,WAAmCjB,IAAIkB,IAAI;gBAChD,MAAMC,iBAAiB,MAAM,IAAI,CAACtB,qBAAqB,CAACmB,MAAM,CAACC;gBAE/D,IAAGE,eAAeC,OAAO,EAAC;oBACxB,MAAMjB,cAAc,MAAM,IAAI,CAACN,qBAAqB,CAACO,oBAAoB;oBACzEH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEc,SAAS;wBAAsBC,MAAMlB,YAAYkB,IAAI;wBAAEC,SAAS;oBAAe;gBACtG,OACI;oBACFrB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,OAAO;oBAAuB;gBACvD,CAAC;YAEL,EAAE,OAAOA,OAAO;gBACdL,KAAKK;YACP;QACF;aAGOgB,SAAS,OAAMvB,KAAcC,KAAeC,OAAsC;YACvF,IAAI;gBAEF,MAAMsB,SAA8BxB,IAAIkB,IAAI;gBAC5C,MAAMO,eAAe,MAAM,IAAI,CAAC5B,qBAAqB,CAAC0B,MAAM,CAACC;gBAE7D,IAAGC,aAAaL,OAAO,EAAC;oBACxB,MAAMjB,cAAc,MAAM,IAAI,CAACN,qBAAqB,CAACO,oBAAoB;oBACzEH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEc,SAAS;wBAAsBC,MAAMlB,YAAYkB,IAAI;wBAAEC,SAAS;oBAAe;gBACtG,OACI;oBACFrB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;wBAAEC,OAAO;oBAAuB;gBACvD,CAAC;YAEH,EAAE,OAAOA,OAAO;gBACdL,KAAKK;YACP;QACF;aAEOmB,SAAS,OAAM1B,KAAcC,KAAeC,OAAsC;YACrF,IAAI;gBACA,MAAMyB,UAAkB3B,IAAIU,MAAM,CAACC,EAAE;gBACrC,MAAMiB,eAAe,MAAM,IAAI,CAAC/B,qBAAqB,CAAC6B,MAAM,CAACC;gBAE7D1B,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEe,MAAMO;oBAAcN,SAAQ;gBAAgB;YAEvE,EAAE,OAAOf,OAAM;gBACbL,KAAKK;YACP;QAEJ;;AAEF;MAEA,WAAeX"}