{"version":3,"sources":["../../src/controllers/article.controller.ts"],"sourcesContent":["import { NextFunction, Response, Request } from \"express\";\r\nimport { CreateArtcile } from \"@/dtos/Article.dto\";\r\nimport { Article } from \"@/interfaces/article.interface\";\r\nimport { logger } from \"@/utils/logger\";\r\nimport { ArticleServices } from '../services/article.services';\r\nimport { AWSDBClient, AWSTables, AWSdbDocClient } from '@/aws';\r\nimport { ScanCommand, GetItemCommand, PutItemCommand, UpdateItemCommand, AttributeValue, DeleteItemCommand } from \"@aws-sdk/client-dynamodb\";\r\nimport { unmarshall, marshall } from '@aws-sdk/util-dynamodb';\r\nimport { ArticleModel } from '../models/article.model';\r\nimport { MetadataService } from \"aws-sdk\";\r\nimport { umask } from \"process\";\r\n\r\nclass ArticleController {\r\n  public ArticleService = new ArticleServices();\r\n\r\n  public getall = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const findAllData = await this.ArticleService.findAllArticle();\r\n\r\n      res.status(200).json(findAllData[\"content\"]);\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getById = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n\r\n      const objectId = req.params.id;\r\n      const findBlocks = await this.ArticleService.findArticleByAsGrp(objectId);\r\n\r\n      res.status(200).json(findBlocks);\r\n\r\n    } catch (err) {\r\n      next(err);\r\n      logger.error(err);\r\n    };\r\n  }\r\n\r\n  public create = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const userData: Article = req.body;\r\n      const createUserData = await this.ArticleService.createArticle(userData);\r\n\r\n      res.status(201).json({ data: createUserData, message: 'created' });\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public update = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n\r\n      const blocks: Article = req.body;\r\n      const updateBlocks = await this.ArticleService.update(blocks);\r\n\r\n      res.status(201).json({ data: updateBlocks, message: 'block updated' });\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public delete = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      const blockId: string = req.params.id;\r\n      const deleteBlocks = await this.ArticleService.delete(blockId);\r\n\r\n      res.status(200).json({ data: deleteBlocks, message: \"block deleted\" });\r\n\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n\r\n  };\r\n\r\n  public assign = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    try {\r\n      var model = new ArticleModel();\r\n\r\n      let queryParams = {\r\n        TableName: AWSTables.grouparticlenumber,\r\n        FilterExpression: \"an_status = :an_status\",\r\n        ExpressionAttributeValues: {\r\n          \":an_status\": { S: \"5\" }\r\n        }\r\n      };\r\n\r\n      const data = await AWSDBClient.send(new ScanCommand(queryParams));\r\n\r\n      const unassignedData = [];\r\n      data.Items.forEach(x => {\r\n        unassignedData.push(unmarshall(x));\r\n      })\r\n\r\n      const artdata = unassignedData.sort((a, b) => a.an_group - b.an_group);\r\n      const dte = new Date();\r\n      \r\n      if (artdata.length < req.body.assignCount) {\r\n        res.statusCode = 500;\r\n        res.json({\r\n          error:\r\n            \"There is no sufficient group for assignment. Please contact administrator.\",\r\n        });\r\n      } else {\r\n        let respItems = [];\r\n        let respitem = {};\r\n\r\n        for (let i = 0; i < req.body.assignCount; i++) {\r\n          let artitem : Article = artdata[i];\r\n          artitem.an_group = artdata[i].an_group;\r\n          artitem.an_status = \"1\";\r\n          artitem.an_source_system = req.body.sourceSystem;\r\n          artitem.an_distribution_comment = req.body.assignComment;\r\n          artitem.an_initial_assignment_date = dte.toString();\r\n          \r\n         const metadata = model.updateArticle(artitem);\r\n\r\n          if((await metadata).data.httpStatusCode == 200){\r\n            respItems.push(artitem);\r\n          }\r\n        }\r\n        res.json({\r\n          success: \"put call succeed!\",\r\n          url: req.url,\r\n          data: respItems,\r\n        });\r\n      }\r\n    }\r\n    catch (err) {\r\n      logger.error(err);\r\n      next(err);\r\n    }\r\n  };\r\n\r\n\r\n  public repblish = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n    console.log('article republish controller called');\r\n    try {\r\n      var model = new ArticleModel();\r\n\r\n      let respItems = [];\r\n      let respitem = {};\r\n\r\n      for (let i = 0; i < req.body.filteredGroup.length; i++) {\r\n        const artitem : Article = {\r\n          an_group: req.body.filteredGroup[i].an_group,\r\n          an_status: req.body.status,\r\n          an_source_system: req.body.sourceSystem,\r\n          an_distribution_comment: req.body.assignComment,\r\n          an_initial_assignment_date: req.body.filteredGroup[i].an_initial_assignment_date,\r\n          an_distribution_date: req.body.filteredGroup[i].an_distribution_date\r\n        };\r\n          const metadata = model.updateArticle(artitem);\r\n\r\n          if((await metadata).data.httpStatusCode == 200){\r\n            respItems.push(artitem);\r\n          }\r\n      }\r\n\r\n      res.json({\r\n        success: \"update call succeed!\",\r\n        url: req.url,\r\n        data: respItems,\r\n      });\r\n\r\n    }\r\n    catch (err) {\r\n      logger.error(err);\r\n      next(err);\r\n    }\r\n  };\r\n\r\n\r\n\r\n}\r\n\r\nexport default ArticleController;"],"names":["ArticleController","ArticleService","ArticleServices","getall","req","res","next","findAllData","findAllArticle","status","json","error","getById","objectId","params","id","findBlocks","findArticleByAsGrp","err","logger","create","userData","body","createUserData","createArticle","data","message","update","blocks","updateBlocks","delete","blockId","deleteBlocks","assign","model","ArticleModel","queryParams","TableName","AWSTables","grouparticlenumber","FilterExpression","ExpressionAttributeValues","S","AWSDBClient","send","ScanCommand","unassignedData","Items","forEach","x","push","unmarshall","artdata","sort","a","b","an_group","dte","Date","length","assignCount","statusCode","respItems","respitem","i","artitem","an_status","an_source_system","sourceSystem","an_distribution_comment","assignComment","an_initial_assignment_date","toString","metadata","updateArticle","httpStatusCode","success","url","repblish","console","log","filteredGroup","an_distribution_date"],"mappings":"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"}