{"version":3,"sources":["../../src/models/article.model.ts"],"sourcesContent":["import { Article } from \"@/interfaces/article.interface\";\r\nimport { ScanCommand, GetItemCommand, PutItemCommand, UpdateItemCommand, AttributeValue, DeleteItemCommand } from \"@aws-sdk/client-dynamodb\";\r\nimport { AWSDBClient, AWSTables, AWSdbDocClient } from '@/aws';\r\nimport { logger } from '@utils/logger';\r\nimport { marshall, unmarshall } from \"@aws-sdk/util-dynamodb\";\r\nimport { UpdateCommand } from '@aws-sdk/lib-dynamodb';\r\nimport { LOG_DIR } from '@config';\r\nimport { query } from \"express\";\r\n\r\nexport class ArticleModel {\r\n\r\n    readAllArticleModel =async () => {\r\n        \r\n        const params = {\r\n            TableName: AWSTables.grouparticlenumber,\r\n            Key: marshall({\r\n                HashKey: \"hashKey\",\r\n            }),\r\n        }\r\n\r\n        try {\r\n            const data = await AWSDBClient.send(new ScanCommand(params));\r\n            let content = [];\r\n            data.Items.forEach( i => {\r\n                content.push(unmarshall(i));\r\n            });\r\n\r\n            return { content};\r\n        }\r\n        catch(er) {\r\n            logger.error(er);\r\n            return ({ success: false, message: 'failed' });\r\n        }\r\n\r\n    };\r\n\r\n    readArticlebyId = async (asgrp: string) =>  {\r\n        \r\n        const params = {\r\n            TableName: AWSTables.grouparticlenumber,\r\n            Key: {\r\n                as_group: {S: `${asgrp}`}\r\n            }\r\n        }\r\n\r\n        try{\r\n            const data = await AWSDBClient.send(new GetItemCommand(params));\r\n\r\n            const content = unmarshall(data.Item);\r\n\r\n            return content;\r\n        }\r\n        catch(err){\r\n            logger.error(err);\r\n            return { success: false, data:null }\r\n        }\r\n    }\r\n\r\n    unassignedArticle =async () => {\r\n        try {\r\n            let queryParams = {\r\n                TableName: AWSTables.grouparticlenumber,\r\n                Key: {\r\n                    an_status: {S: \"5\"}\r\n                }\r\n              };\r\n\r\n              const data = await AWSDBClient.send(new GetItemCommand(queryParams));\r\n              const content = unmarshall(data.Item);\r\n  \r\n              return content;\r\n\r\n        }\r\n        catch(err) {\r\n            logger.error(err);\r\n            return { success: false, data:null};\r\n        }\r\n    };\r\n\r\n    createArticle = async (article: Article) => {\r\n\r\n        const articleMarshalled: Record<string, AttributeValue> = marshall(article);\r\n\r\n        const params = {\r\n            TableName: AWSTables.grouparticlenumber,\r\n            Item: articleMarshalled\r\n        }\r\n\r\n        try {\r\n            const data = await AWSDBClient.send(new PutItemCommand(params));\r\n            return data.$metadata;\r\n        }\r\n        catch(err) {\r\n            logger.error(err);\r\n            return {success: false, data:null}\r\n        }\r\n    }\r\n\r\n    updateArticle = async (article: Article) => {\r\n\r\n        const articleMarshalled: Record<string, AttributeValue> = marshall(article);\r\n\r\n        const key = {\r\n            an_group: {S: article.an_group}\r\n        };\r\n\r\n        const updateExpression = `SET #an_initial_assignment_date = :an_initial_assignment_date,\r\n        #an_status = :an_status,\r\n        #an_source_system = :an_source_system,\r\n        #an_distribution_comment = :an_distribution_comment,\r\n        #an_distribution_date = :an_distribution_date`;\r\n\r\n        const expressionAttributeNames = {\r\n            \"#an_initial_assignment_date\" : \"an_initial_assignment_date\",\r\n            \"#an_status\" : \"an_status\",\r\n            \"#an_source_system\" : \"an_source_system\",\r\n            \"#an_distribution_comment\" : \"an_distribution_comment\",\r\n            \"#an_distribution_date\" : \"an_distribution_date\"\r\n        };\r\n\r\n        const expressionAttributeValues = {\r\n            \":an_initial_assignment_date\" : article.an_initial_assignment_date,\r\n            \":an_status\" : article.an_status,\r\n            \":an_source_system\" : article.an_source_system,\r\n            \":an_distribution_comment\" : article.an_distribution_comment,\r\n            \":an_distribution_date\" : article.an_distribution_date\r\n        }\r\n\r\n        const params  = {\r\n            TableName: AWSTables.grouparticlenumber,\r\n            Key: {\r\n                an_group: article.an_group\r\n            },\r\n            ExpressionAttributeNames: expressionAttributeNames,\r\n            UpdateExpression: updateExpression,\r\n            ExpressionAttributeValues: expressionAttributeValues,\r\n            ReturnValues: \"UPDATED_NEW\"\r\n        };\r\n\r\n        try {\r\n            const data = await AWSDBClient.send(new UpdateCommand(params));\r\n            \r\n            return { success: true, data: data.$metadata };\r\n        }\r\n        catch(err) {\r\n            logger.error(err);\r\n            return {success: false, data:null}\r\n        }\r\n\r\n    };\r\n\r\n    deleteArticle = async (asgrp: string) => {\r\n        const params = {\r\n            TableName: AWSTables.grouparticlenumber,\r\n            Key:{\r\n                an_group: {S: asgrp}\r\n            }\r\n        };\r\n\r\n        try {\r\n            const restdata = await AWSDBClient.send(new DeleteItemCommand(params));\r\n            return restdata.$metadata;\r\n        }\r\n        catch(err) {\r\n            logger.error(err);\r\n            return {success: false, data:null}\r\n        }\r\n    }\r\n}"],"names":["ArticleModel","readAllArticleModel","params","TableName","AWSTables","grouparticlenumber","Key","marshall","HashKey","data","AWSDBClient","send","ScanCommand","content","Items","forEach","i","push","unmarshall","er","logger","error","success","message","readArticlebyId","asgrp","as_group","S","GetItemCommand","Item","err","unassignedArticle","queryParams","an_status","createArticle","article","articleMarshalled","PutItemCommand","$metadata","updateArticle","key","an_group","updateExpression","expressionAttributeNames","expressionAttributeValues","an_initial_assignment_date","an_source_system","an_distribution_comment","an_distribution_date","ExpressionAttributeNames","UpdateExpression","ExpressionAttributeValues","ReturnValues","UpdateCommand","deleteArticle","restdata","DeleteItemCommand"],"mappings":"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"}