{"version":3,"sources":["../../src/models/modelgroup.model.ts"],"sourcesContent":["import { ModelGroup } from \"@/interfaces/modelgroup.interface\";\r\nimport { ScanCommand, GetItemCommand, PutItemCommand, UpdateItemCommand, AttributeValue, DeleteItemCommand } from \"@aws-sdk/client-dynamodb\";\r\nimport { AWSDBClient, AWSTables, AWSdbDocClient } from '@/aws';\r\nimport { logger } from '@utils/logger';\r\nimport { marshall, unmarshall } from \"@aws-sdk/util-dynamodb\";\r\nimport { UpdateCommand } from '@aws-sdk/lib-dynamodb';\r\nimport { LOG_DIR } from '@config';\r\nimport { Model } from \"aws-sdk/clients/iotwireless\";\r\n\r\nexport class ModelGroupModel {\r\n\r\n    readAllModelGroup =async () => {\r\n        \r\n        const params = {\r\n            TableName: AWSTables.groupmodelnumber,\r\n            Key: marshall({\r\n                HashKey: \"hashKey\",\r\n            }),\r\n        }\r\n\r\n        try {\r\n            const data = await AWSDBClient.send(new ScanCommand(params));\r\n\r\n            let content = [];\r\n            data.Items.forEach( i => {\r\n                content.push(unmarshall(i));\r\n            });\r\n\r\n            return { content};\r\n        }\r\n        catch(er) {\r\n            logger.error(er);\r\n            return ({ success: false, message: 'failed' });\r\n        }\r\n\r\n    };\r\n\r\n    readModelGroupbyId = async (asgrp: string) =>  {\r\n        \r\n        const params = {\r\n            TableName: AWSTables.groupmodelnumber,\r\n            Key: {\r\n                as_group: {S: `${asgrp}`}\r\n            }\r\n        }\r\n\r\n        try{\r\n            const data = await AWSDBClient.send(new GetItemCommand(params));\r\n\r\n            const content = unmarshall(data.Item);\r\n\r\n            return content;\r\n        }\r\n        catch(err){\r\n            logger.error(err);\r\n            return { success: false, data:null }\r\n        }\r\n    }\r\n\r\n    createModelGroup = async (modelgrup: ModelGroup) => {\r\n\r\n        const modelGroupMarshalled: Record<string, AttributeValue> = marshall(modelgrup);\r\n\r\n        const params = {\r\n            TableName: AWSTables.groupmodelnumber,\r\n            Item: modelGroupMarshalled\r\n        }\r\n\r\n        try {\r\n            const data = await AWSDBClient.send(new PutItemCommand(params));\r\n            return data.$metadata;\r\n        }\r\n        catch(err) {\r\n            logger.error(err);\r\n            return {success: false, data:null}\r\n        }\r\n    }\r\n\r\n    updateModelGroup = async (modelgrup: ModelGroup) => {\r\n\r\n        const modelGroupMarshalled: Record<string, AttributeValue> = marshall(modelgrup);\r\n\r\n        const key = {\r\n            an_group: {S: modelgrup.mn_group}\r\n        };\r\n\r\n        const updateExpression = `SET #mn_distribution_comment = :mn_distribution_comment,\r\n        #mn_status = :mn_status,\r\n        #mn_distribution_date = :mn_distribution_date,\r\n        #mn_source_system = :mn_source_system,\r\n        #mn_initial_assignment_date = :mn_initial_assignment_date`;\r\n\r\n        const expressionAttributeNames = {\r\n            \"#mn_distribution_comment\" : \"mn_distribution_comment\",\r\n            \"#mn_status\" : \"mn_status\",\r\n            \"#mn_distribution_date\" : \"mn_distribution_date\",\r\n            \"#mn_source_system\" : \"mn_source_system\",\r\n            \"#mn_initial_assignment_date\" : \"mn_initial_assignment_date\"\r\n        };\r\n\r\n        const expressionAttributeValues = {\r\n            \":mn_distribution_comment\" : modelgrup.mn_distribution_comment,\r\n            \":mn_status\" : modelgrup.mn_status,\r\n            \":mn_distribution_date\" : modelgrup.mn_distribution_date,\r\n            \":mn_source_system\" : modelgrup.mn_source_system,\r\n            \":mn_initial_assignment_date\" : modelgrup.mn_initial_assignment_date\r\n        }\r\n\r\n        const params  = {\r\n            TableName: AWSTables.groupmodelnumber,\r\n            Key: {\r\n                an_group: modelgrup.mn_group\r\n            },\r\n            ExpressionAttributeNames: expressionAttributeNames,\r\n            UpdateExpression: updateExpression,\r\n            ExpressionAttributeValues: expressionAttributeValues,\r\n            ReturnValues: \"UPDATED_NEW\"\r\n        };\r\n\r\n        try {\r\n            const data = await AWSDBClient.send(new UpdateCommand(params));\r\n            \r\n            return {success: true, data:data.$metadata};\r\n        }\r\n        catch(err) {\r\n            logger.error(err);\r\n            return {success: false, data:null}\r\n        }\r\n\r\n    };\r\n\r\n    deleteArticle = async (asgrp: string) => {\r\n        const params = {\r\n            TableName: AWSTables.groupmodelnumber,\r\n            Key:{\r\n                an_group: {S: asgrp}\r\n            }\r\n        };\r\n\r\n        try {\r\n            const restdata = await AWSDBClient.send(new DeleteItemCommand(params));\r\n            return restdata.$metadata;\r\n        }\r\n        catch(err) {\r\n            logger.error(err);\r\n            return {success: false, data:null}\r\n        }\r\n    }\r\n}"],"names":["ModelGroupModel","readAllModelGroup","params","TableName","AWSTables","groupmodelnumber","Key","marshall","HashKey","data","AWSDBClient","send","ScanCommand","content","Items","forEach","i","push","unmarshall","er","logger","error","success","message","readModelGroupbyId","asgrp","as_group","S","GetItemCommand","Item","err","createModelGroup","modelgrup","modelGroupMarshalled","PutItemCommand","$metadata","updateModelGroup","key","an_group","mn_group","updateExpression","expressionAttributeNames","expressionAttributeValues","mn_distribution_comment","mn_status","mn_distribution_date","mn_source_system","mn_initial_assignment_date","ExpressionAttributeNames","UpdateExpression","ExpressionAttributeValues","ReturnValues","UpdateCommand","deleteArticle","restdata","DeleteItemCommand"],"mappings":";;;;+BASaA;;aAAAA;;gCARqG;qBAC3D;wBAChC;8BACc;6BACP;AAIvB,IAAA,AAAMA,kBAAN,MAAMA;;aAETC,oBAAmB,UAAY;YAE3B,MAAMC,SAAS;gBACXC,WAAWC,cAAS,CAACC,gBAAgB;gBACrCC,KAAKC,IAAAA,sBAAQ,EAAC;oBACVC,SAAS;gBACb;YACJ;YAEA,IAAI;gBACA,MAAMC,OAAO,MAAMC,gBAAW,CAACC,IAAI,CAAC,IAAIC,2BAAW,CAACV;gBAEpD,IAAIW,UAAU,EAAE;gBAChBJ,KAAKK,KAAK,CAACC,OAAO,CAAEC,CAAAA,IAAK;oBACrBH,QAAQI,IAAI,CAACC,IAAAA,wBAAU,EAACF;gBAC5B;gBAEA,OAAO;oBAAEH;gBAAO;YACpB,EACA,OAAMM,IAAI;gBACNC,cAAM,CAACC,KAAK,CAACF;gBACb,OAAQ;oBAAEG,SAAS,KAAK;oBAAEC,SAAS;gBAAS;YAChD;QAEJ;aAEAC,qBAAqB,OAAOC,QAAmB;YAE3C,MAAMvB,SAAS;gBACXC,WAAWC,cAAS,CAACC,gBAAgB;gBACrCC,KAAK;oBACDoB,UAAU;wBAACC,GAAG,CAAC,EAAEF,MAAM,CAAC;oBAAA;gBAC5B;YACJ;YAEA,IAAG;gBACC,MAAMhB,OAAO,MAAMC,gBAAW,CAACC,IAAI,CAAC,IAAIiB,8BAAc,CAAC1B;gBAEvD,MAAMW,UAAUK,IAAAA,wBAAU,EAACT,KAAKoB,IAAI;gBAEpC,OAAOhB;YACX,EACA,OAAMiB,KAAI;gBACNV,cAAM,CAACC,KAAK,CAACS;gBACb,OAAO;oBAAER,SAAS,KAAK;oBAAEb,MAAK,IAAI;gBAAC;YACvC;QACJ;aAEAsB,mBAAmB,OAAOC,YAA0B;YAEhD,MAAMC,uBAAuD1B,IAAAA,sBAAQ,EAACyB;YAEtE,MAAM9B,SAAS;gBACXC,WAAWC,cAAS,CAACC,gBAAgB;gBACrCwB,MAAMI;YACV;YAEA,IAAI;gBACA,MAAMxB,OAAO,MAAMC,gBAAW,CAACC,IAAI,CAAC,IAAIuB,8BAAc,CAAChC;gBACvD,OAAOO,KAAK0B,SAAS;YACzB,EACA,OAAML,KAAK;gBACPV,cAAM,CAACC,KAAK,CAACS;gBACb,OAAO;oBAACR,SAAS,KAAK;oBAAEb,MAAK,IAAI;gBAAA;YACrC;QACJ;aAEA2B,mBAAmB,OAAOJ,YAA0B;YAEhD,MAAMC,uBAAuD1B,IAAAA,sBAAQ,EAACyB;YAEtE,MAAMK,MAAM;gBACRC,UAAU;oBAACX,GAAGK,UAAUO,QAAQ;gBAAA;YACpC;YAEA,MAAMC,mBAAmB,CAAC;;;;iEAI+B,CAAC;YAE1D,MAAMC,2BAA2B;gBAC7B,4BAA6B;gBAC7B,cAAe;gBACf,yBAA0B;gBAC1B,qBAAsB;gBACtB,+BAAgC;YACpC;YAEA,MAAMC,4BAA4B;gBAC9B,4BAA6BV,UAAUW,uBAAuB;gBAC9D,cAAeX,UAAUY,SAAS;gBAClC,yBAA0BZ,UAAUa,oBAAoB;gBACxD,qBAAsBb,UAAUc,gBAAgB;gBAChD,+BAAgCd,UAAUe,0BAA0B;YACxE;YAEA,MAAM7C,SAAU;gBACZC,WAAWC,cAAS,CAACC,gBAAgB;gBACrCC,KAAK;oBACDgC,UAAUN,UAAUO,QAAQ;gBAChC;gBACAS,0BAA0BP;gBAC1BQ,kBAAkBT;gBAClBU,2BAA2BR;gBAC3BS,cAAc;YAClB;YAEA,IAAI;gBACA,MAAM1C,OAAO,MAAMC,gBAAW,CAACC,IAAI,CAAC,IAAIyC,0BAAa,CAAClD;gBAEtD,OAAO;oBAACoB,SAAS,IAAI;oBAAEb,MAAKA,KAAK0B,SAAS;gBAAA;YAC9C,EACA,OAAML,KAAK;gBACPV,cAAM,CAACC,KAAK,CAACS;gBACb,OAAO;oBAACR,SAAS,KAAK;oBAAEb,MAAK,IAAI;gBAAA;YACrC;QAEJ;aAEA4C,gBAAgB,OAAO5B,QAAkB;YACrC,MAAMvB,SAAS;gBACXC,WAAWC,cAAS,CAACC,gBAAgB;gBACrCC,KAAI;oBACAgC,UAAU;wBAACX,GAAGF;oBAAK;gBACvB;YACJ;YAEA,IAAI;gBACA,MAAM6B,WAAW,MAAM5C,gBAAW,CAACC,IAAI,CAAC,IAAI4C,iCAAiB,CAACrD;gBAC9D,OAAOoD,SAASnB,SAAS;YAC7B,EACA,OAAML,KAAK;gBACPV,cAAM,CAACC,KAAK,CAACS;gBACb,OAAO;oBAACR,SAAS,KAAK;oBAAEb,MAAK,IAAI;gBAAA;YACrC;QACJ;;AACJ"}