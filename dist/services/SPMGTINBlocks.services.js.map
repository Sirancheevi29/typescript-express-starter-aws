{"version":3,"sources":["../../src/services/SPMGTINBlocks.services.ts"],"sourcesContent":["import { hash } from 'bcrypt';\r\nimport { CreateSPMGTINBlocks } from '@dtos/SPMTGTINBlocks.dto';\r\nimport { HttpException } from '@exceptions/HttpException';\r\nimport { SPMGTINBlocks } from '@interfaces/SPMGTINBlocks.interface';\r\nimport { isEmpty } from '@utils/util';\r\nimport { SPMTGTINBlocksModel } from '@models/SPMGTINBlocks.model';\r\nimport { logger } from '@utils/logger';\r\nimport { BlockList } from 'net';\r\nimport { json } from 'envalid';\r\n\r\n\r\nexport class SPMGTINBlocksServices {\r\n\r\n    public async finaAllSPMGTINBlcoks() {\r\n        var model = new SPMTGTINBlocksModel();\r\n        var items = model.readAllSPMTGTINBlocksModel();\r\n        return items;\r\n    }\r\n\r\n    public async findGTINBlocksById(objectId: string)  {\r\n        var model = new SPMTGTINBlocksModel();\r\n        var content = model.readSPMGTINBlocksById(objectId);\r\n        \r\n        if (!content) throw new HttpException(409, \"content not found\");\r\n        return content;\r\n        \r\n    }\r\n\r\n    public async create(Blocksdata:CreateSPMGTINBlocks) {\r\n        if (isEmpty(Blocksdata)) throw new HttpException(400, \"Blocks is empty\");\r\n        var model = new SPMTGTINBlocksModel();\r\n        const findBlocks = model.createSPMGTINBlock(Blocksdata);\r\n       // if (findBlocks) throw new HttpException(409, `This blocks ${Blocksdata.blockId} already exists`);\r\n    \r\n        return findBlocks;\r\n      }\r\n\r\n    public async update(blocks: SPMGTINBlocks) {\r\n        if (isEmpty(blocks)) throw new HttpException(400, \"Block is emptyp\");\r\n        \r\n        var model = new SPMTGTINBlocksModel();\r\n        const updatedBlocks = model.updateSPMGTINBlock(blocks);\r\n\r\n        return updatedBlocks;\r\n    }\r\n\r\n    public async delete(blockId: string) {\r\n        if(isEmpty(blockId)) throw new HttpException(400, \"blockId is empty\");\r\n        \r\n        var model  = new SPMGTINBlocksServices();\r\n        const deletedBlocks = model.delete(blockId);\r\n\r\n        return deletedBlocks;\r\n    }\r\n\r\n}"],"names":["SPMGTINBlocksServices","finaAllSPMGTINBlcoks","model","SPMTGTINBlocksModel","items","readAllSPMTGTINBlocksModel","findGTINBlocksById","objectId","content","readSPMGTINBlocksById","HttpException","create","Blocksdata","isEmpty","findBlocks","createSPMGTINBlock","update","blocks","updatedBlocks","updateSPMGTINBlock","delete","blockId","deletedBlocks"],"mappings":";;;;+BAWaA;;aAAAA;;+BATiB;sBAEN;oCACY;AAM7B,IAAA,AAAMA,wBAAN,MAAMA;IAET,MAAaC,uBAAuB;QAChC,IAAIC,QAAQ,IAAIC,uCAAmB;QACnC,IAAIC,QAAQF,MAAMG,0BAA0B;QAC5C,OAAOD;IACX;IAEA,MAAaE,mBAAmBC,QAAgB,EAAG;QAC/C,IAAIL,QAAQ,IAAIC,uCAAmB;QACnC,IAAIK,UAAUN,MAAMO,qBAAqB,CAACF;QAE1C,IAAI,CAACC,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK,qBAAqB;QAChE,OAAOF;IAEX;IAEA,MAAaG,OAAOC,UAA8B,EAAE;QAChD,IAAIC,IAAAA,aAAO,EAACD,aAAa,MAAM,IAAIF,4BAAa,CAAC,KAAK,mBAAmB;QACzE,IAAIR,QAAQ,IAAIC,uCAAmB;QACnC,MAAMW,aAAaZ,MAAMa,kBAAkB,CAACH;QAG5C,OAAOE;IACT;IAEF,MAAaE,OAAOC,MAAqB,EAAE;QACvC,IAAIJ,IAAAA,aAAO,EAACI,SAAS,MAAM,IAAIP,4BAAa,CAAC,KAAK,mBAAmB;QAErE,IAAIR,QAAQ,IAAIC,uCAAmB;QACnC,MAAMe,gBAAgBhB,MAAMiB,kBAAkB,CAACF;QAE/C,OAAOC;IACX;IAEA,MAAaE,OAAOC,OAAe,EAAE;QACjC,IAAGR,IAAAA,aAAO,EAACQ,UAAU,MAAM,IAAIX,4BAAa,CAAC,KAAK,oBAAoB;QAEtE,IAAIR,QAAS,IAAIF;QACjB,MAAMsB,gBAAgBpB,MAAMkB,MAAM,CAACC;QAEnC,OAAOC;IACX;AAEJ"}